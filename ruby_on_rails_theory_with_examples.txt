
Ruby & Ruby on Rails - Theoretical Concepts with Real-Life Examples
====================================================================

1. What is Ruby?
----------------
Ruby is a high-level, interpreted programming language focused on simplicity and productivity.

ðŸ§  Real-Life Example:
Think of Ruby as English for your computer â€” easy to write and understand.

2. What is Ruby on Rails?
-------------------------
Ruby on Rails (RoR) is a web application framework written in Ruby. It helps build websites quickly using the MVC (Model-View-Controller) pattern.

ðŸ§  Real-Life Example:
Think of Rails as a kitchen set with all the tools needed to cook (build a website) â€” oven, knife, recipes, etc.

3. Variables
------------
Variables are used to store data.

ðŸ§  Example:
```ruby
name = "Tejas"
age = 25
```
Like putting your friend's contact info in your phone.

4. Classes and Objects
----------------------
A class defines a blueprint, and an object is an instance of that class.

ðŸ§  Example:
```ruby
class Car
  def drive
    puts "The car is moving!"
  end
end

my_car = Car.new
my_car.drive
```
Think of a class as a car manual and an object as your actual car.

5. Methods
----------
Methods are functions inside classes that perform actions.

ðŸ§  Example:
```ruby
def greet(name)
  puts "Hello, #{name}!"
end

greet("Tejas")
```
Like pressing a "Call" button on your phone.

6. If-Else Conditionals
-----------------------
Control flow for decision making.

ðŸ§  Example:
```ruby
age = 18
if age >= 18
  puts "You can vote."
else
  puts "Too young to vote."
end
```
Like deciding whether to enter a movie based on age.

7. Loops
--------
Used to repeat actions.

ðŸ§  Example:
```ruby
5.times do
  puts "Practice makes perfect!"
end
```
Like setting an alarm to ring 5 times.

8. Arrays and Hashes
--------------------
Arrays store lists; hashes store key-value pairs.

ðŸ§  Example:
```ruby
fruits = ["apple", "banana"]
student = {name: "Tejas", grade: "A"}
```
An array is like your shopping list. A hash is like a student ID card.

9. MVC Architecture
-------------------
- Model: Manages data (database)
- View: Displays data (HTML/CSS)
- Controller: Handles input & logic

ðŸ§  Real-Life Example:
Ordering a pizza:
- Model = ingredients database
- View = menu you see
- Controller = waiter handling your order

10. Routes
----------
Routes connect URLs to controllers in Rails.

ðŸ§  Example:
```ruby
get '/welcome' => 'home#welcome'
```
Like a GPS guiding requests to the correct controller.

11. Migrations
--------------
Used to make changes to the database structure.

ðŸ§  Example:
```ruby
rails generate migration AddEmailToUsers email:string
```
Like updating a spreadsheet to add a new column.

12. ActiveRecord
----------------
Rails' way to interact with the database using Ruby code.

ðŸ§  Example:
```ruby
User.find(1)
```
Like searching a contact by number instead of flipping through pages.

13. Helpers
-----------
Helpers format data for views.

ðŸ§  Example:
```ruby
number_to_currency(1000) # => "$1,000.00"
```
Like auto-formatting a number into currency format on an invoice.

14. Partials
------------
Reusable pieces of HTML.

ðŸ§  Example:
```erb
<%= render 'navbar' %>
```
Like using the same header on every page of a website.

15. Gems
--------
Libraries that add extra features to your Rails app.

ðŸ§  Example:
`devise` for authentication

Like installing a new app on your phone to get more features.

---

Happy learning! ðŸš€
